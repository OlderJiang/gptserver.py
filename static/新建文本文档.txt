可以了，谢谢。以下是我的代码：
register.py:
import pymysql

def check_existing_user(username):
    connection = pymysql.connect(
        host='localhost',
        user='root',
        password='1234',
        database='sys',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        with connection.cursor() as cursor:
            sql = "SELECT * FROM userinfo WHERE Username = %s"
            cursor.execute(sql, (username,))
            result = cursor.fetchone()
            if result:
                return True  # 用户名已存在
            else:
                return False  # 用户名不存在
    finally:
        connection.close()

def register_user(username, password):
    if check_existing_user(username):
        return 'duplicate'  # 返回重复用户信息

    connection = pymysql.connect(
        host='localhost',
        user='root',
        password='1234',
        database='sys',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        with connection.cursor() as cursor:
            sql = "INSERT INTO userinfo (Username, Password) VALUES (%s, %s)"
            cursor.execute(sql, (username, password))
            connection.commit()
    finally:
        connection.close()

register.html:
<!DOCTYPE html>
<html>
<head>

    <title>注册</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #f2f2f2;
        }

        .center-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .container {
            width: 320px; /* 调整宽度 */
            background-color: #fff;
            padding: 80px;
            border-radius: 8px;
        }

        .container h2 {
            text-align: center;
        }

        .container form {
            margin-top: 20px;
        }

        .container form input[type="text"],
        .container form input[type="password"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
            box-sizing: border-box;
            font-size: 16px;
        }

        .container form input[type="submit"] {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        .container form input[type="submit"]:hover {
            background-color: #45a049;
        }

        .container a {
            display: block;
            text-align: center;
            margin-top: 10px;
            font-size: 14px;
            color: #888;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <div class="center-container">
        <div class="container">
            <h2>注册</h2>
            <form action="/register" method="POST">
                <input type="text" name="username" placeholder="用户名" required><br>
                <input type="password" name="password" placeholder="密码" required><br>
                <input type="submit" value="注册">
                <span id="error-msg" style="color: red;"></span>  <!-- 新增的错误信息显示位置 -->
            </form>
            <a href="/">返回登录</a>
        </div>
    </div>

</body>
</html>

app.py:
from flask import Flask, render_template, jsonify, request
import pymysql
import openai
from register import register_user

app = Flask(__name__, static_folder='static')

api_keys = ['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', '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', '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']
model_name = "gpt-3.5-turbo"

chat_histories = [[] for _ in range(len(api_keys))]

def connect_to_database():
    connection = pymysql.connect(
        host='localhost',
        user='root',
        password='1234',
        database='sys',
        cursorclass=pymysql.cursors.DictCursor
    )
    return connection

def user_login(username, password):
    connection = connect_to_database()

    try:
        with connection.cursor() as cursor:
            sql = "SELECT * FROM userinfo WHERE Username = %s AND Password = %s"
            cursor.execute(sql, (username, password))
            result = cursor.fetchone()
            if result:
                return True
            else:
                return False
    finally:
        connection.close()

@app.route('/')
def index():
    return app.send_static_file('rein.html')

@app.route('/register')
def register():
    return app.send_static_file('register.html')

@app.route('/register', methods=['POST'])
def handle_registration():
    data = request.form
    username = data.get('username', '')
    password = data.get('password', '')

    result = register_user(username, password)  # 调用 register.py 中的注册方法

    if result == 'duplicate':
        return "用户名已存在，请选择其他用户名"  # 返回重复用户信息给注册页面
    else:
        return app.send_static_file('rein.html')

@app.route('/login', methods=['POST'])
def login():
    data = request.form
    username = data.get('username', '')
    password = data.get('password', '')

    if user_login(username, password):
        return app.send_static_file('index.html')
    else:
        return "用户名或密码错误"

@app.route('/get_response', methods=['POST'])
def get_response():
    data = request.get_json()
    user_input = data.get('user_input', '')
    api_key_index = data.get('api_key_index', 0) % len(api_keys)

    chat_history = chat_histories[api_key_index]
    recent_chat_history = chat_history[-5:]

    input_text = '\n'.join(recent_chat_history + [user_input])

    openai.api_key = api_keys[api_key_index]
    response = openai.ChatCompletion.create(
        model=model_name,
        messages=[
            {"role": "system", "content": "我是 ChatGPT，一款强大的语言模型助手。我可以回答你的问题、提供帮助和交流。请告诉我你需要什么帮助。"},
            {"role": "user", "content": input_text}
        ],
        temperature=0.5,
        max_tokens=2300
    )

    chat_response = response.choices[0].message.content.strip()

    chat_history.append(user_input)
    chat_history.append(chat_response)

    return jsonify({'chat_response': chat_response})

if __name__ == '__main__':
    app.run(debug=True)